/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VNLSBuyOrderBookInterface extends ethers.utils.Interface {
  functions: {
    "buy(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "count()": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "sell(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;

  events: {
    "Buy(uint256,address,uint256,uint256)": EventFragment;
    "Cancel(uint256)": EventFragment;
    "Remove(uint256)": EventFragment;
    "Sell(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
}

export class VNLSBuyOrderBook extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VNLSBuyOrderBookInterface;

  functions: {
    buy(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(uint256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancel(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    get(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    sell(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sell(uint256,uint256)"(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  buy(
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(uint256)"(
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancel(
    orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  "count()"(overrides?: CallOverrides): Promise<BigNumber>;

  get(
    orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      buyer: string;
      amount: BigNumber;
      price: BigNumber;
    }
  >;

  "get(uint256)"(
    orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      buyer: string;
      amount: BigNumber;
      price: BigNumber;
    }
  >;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      buyer: string;
      amount: BigNumber;
      price: BigNumber;
    }
  >;

  "orders(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      buyer: string;
      amount: BigNumber;
      price: BigNumber;
    }
  >;

  sell(
    orderId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sell(uint256,uint256)"(
    orderId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "buy(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(orderId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancel(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    "count()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        buyer: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    sell(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint256,uint256)"(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Buy(
      orderId: BigNumberish | null,
      buyer: string | null,
      amount: null,
      price: null
    ): EventFilter;

    Cancel(orderId: BigNumberish | null): EventFilter;

    Remove(orderId: BigNumberish | null): EventFilter;

    Sell(
      orderId: BigNumberish | null,
      seller: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    buy(amount: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    "buy(uint256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancel(orderId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancel(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    "count()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(orderId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sell(uint256,uint256)"(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sell(uint256,uint256)"(
      orderId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
