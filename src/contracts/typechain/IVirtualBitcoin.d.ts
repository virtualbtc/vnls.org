/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IVirtualBitcoinInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyPizza(uint256)": FunctionFragment;
    "changePizza(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "mine(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "pizzaCount()": FunctionFragment;
    "pizzaPrice(uint256)": FunctionFragment;
    "powerOf(uint256)": FunctionFragment;
    "sellPizza(uint256)": FunctionFragment;
    "subsidyAt(uint256)": FunctionFragment;
    "subsidyOf(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyPizza",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePizza",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "mine", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pizzaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pizzaPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "powerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellPizza",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subsidyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subsidyOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyPizza", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePizza",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pizzaCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pizzaPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "powerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellPizza", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subsidyAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subsidyOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BuyPizza(address,uint256,uint256)": EventFragment;
    "ChangePizza(address,uint256,uint256)": EventFragment;
    "Mine(address,uint256,uint256)": EventFragment;
    "SellPizza(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyPizza"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePizza"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellPizza"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IVirtualBitcoin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IVirtualBitcoinInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    buyPizza(
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyPizza(uint256)"(
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changePizza(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changePizza(uint256,uint256)"(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    mine(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mine(uint256)"(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    pizzaCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pizzaCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pizzaPrice(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pizzaPrice(uint256)"(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    powerOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "powerOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellPizza(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellPizza(uint256)"(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subsidyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "subsidyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    subsidyOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "subsidyOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyPizza(
    power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyPizza(uint256)"(
    power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changePizza(
    pizzaId: BigNumberish,
    power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changePizza(uint256,uint256)"(
    pizzaId: BigNumberish,
    power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  mine(
    pizzaId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mine(uint256)"(
    pizzaId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  pizzaCount(overrides?: CallOverrides): Promise<BigNumber>;

  "pizzaCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  pizzaPrice(
    power: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pizzaPrice(uint256)"(
    power: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  powerOf(pizzaId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "powerOf(uint256)"(
    pizzaId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellPizza(
    pizzaId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellPizza(uint256)"(
    pizzaId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subsidyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "subsidyAt(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  subsidyOf(
    pizzaId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "subsidyOf(uint256)"(
    pizzaId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPizza(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyPizza(uint256)"(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changePizza(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changePizza(uint256,uint256)"(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    mine(pizzaId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "mine(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    pizzaCount(overrides?: CallOverrides): Promise<BigNumber>;

    "pizzaCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    pizzaPrice(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pizzaPrice(uint256)"(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    powerOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "powerOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellPizza(pizzaId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "sellPizza(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subsidyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subsidyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subsidyOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subsidyOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      amount: null
    ): EventFilter;

    BuyPizza(
      owner: string | null,
      pizzaId: BigNumberish | null,
      power: null
    ): EventFilter;

    ChangePizza(
      owner: string | null,
      pizzaId: BigNumberish | null,
      power: null
    ): EventFilter;

    Mine(
      owner: string | null,
      pizzaId: BigNumberish | null,
      subsidy: null
    ): EventFilter;

    SellPizza(owner: string | null, pizzaId: BigNumberish | null): EventFilter;

    Transfer(from: string | null, to: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPizza(power: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "buyPizza(uint256)"(
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changePizza(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changePizza(uint256,uint256)"(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    mine(pizzaId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "mine(uint256)"(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    pizzaCount(overrides?: CallOverrides): Promise<BigNumber>;

    "pizzaCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    pizzaPrice(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pizzaPrice(uint256)"(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    powerOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "powerOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellPizza(pizzaId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "sellPizza(uint256)"(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subsidyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subsidyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subsidyOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subsidyOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyPizza(
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyPizza(uint256)"(
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changePizza(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changePizza(uint256,uint256)"(
      pizzaId: BigNumberish,
      power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mine(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mine(uint256)"(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pizzaCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pizzaCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pizzaPrice(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pizzaPrice(uint256)"(
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    powerOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "powerOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellPizza(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellPizza(uint256)"(
      pizzaId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subsidyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subsidyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subsidyOf(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subsidyOf(uint256)"(
      pizzaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
